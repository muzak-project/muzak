#!/usr/bin/env ruby
# frozen_string_literal: true

require "muzak"

VERSION = 3

OPTS = {
  deep: !!(ARGV.delete("--deep") || ARGV.delete("-d")),
  verbose: !!(ARGV.delete("--verbose") || ARGV.delete("-V")),
  help: !!(ARGV.delete("--help") || ARGV.delete("-h")),
  version: !!(ARGV.delete("--version") || ARGV.delete("-v")),
}.freeze

HELP = <<~EOS
  Usage: #{$PROGRAM_NAME} [options] [tree] [index]

  Options:
    --deep, -d      Build a "deep" index (contains metadata)
    --verbose, -V   Be verbose while indexing
    --help, -h      Print this help message
    --version, -v   Print version information

  Arguments:
    [tree]          The filesystem tree to index (default: #{Muzak::Config.music})
    [index]         The saved index (default: #{Muzak::Config::INDEX_FILE})
EOS

def help
  puts HELP
  exit
end

def version
  puts "muzak-index version #{VERSION}."
  exit
end

def info(msg)
  puts "[\e[32minfo\e[0m]: #{msg}" if OPTS[:verbose]
end

def bail(msg)
  STDERR.puts "[\e[31merror\e[0m]: #{msg}"
  exit 1
end

help if OPTS[:help]
version if OPTS[:version]

tree = ARGV.shift || Muzak::Config.music
bail "missing or invalid tree: <tree>" unless tree && File.exist?(tree)

index_file = ARGV.shift || Muzak::Config::INDEX_FILE

index_hash = {
  "tree" => tree,
  "timestamp" => Time.now.to_i,
  "deep" => OPTS[:deep],
}

artist_names = Dir.entries(tree).reject! { |ent| ent.start_with?(".") }

index_hash["artists"] = artist_names.map do |artist|
  [artist, { "albums" => {} }]
end.to_h

artist_names.each do |artist|
  Dir.entries(File.join(tree, artist)).each do |album|
    next if album.start_with?(".")

    info "indexing '#{artist}' - '#{album}'..."

    album_hash               = {}
    album_hash["songs"]      = []
    album_hash["deep-songs"] = []

    Dir.glob(File.join(tree, artist, album, "**")) do |file|
      album_hash["cover"] = file if Muzak::Utils.album_art?(file)

      if Muzak::Utils.music?(file)
        album_hash["songs"] << file
        album_hash["deep-songs"] << Muzak::Song.new(file) if OPTS[:deep]
      end
    end

    album_hash["songs"].sort!

    # if any of the track numbers in the album are > 0 (the fallback),
    # sort by ID3 track numbers. otherwise, hope that the song
    # paths contain track numbers (e.g, "01 song.mp3").
    if album_hash["deep-songs"].any? { |s| s.track.positive? }
      album_hash["deep-songs"].sort_by!(&:track)
    else
      album_hash["deep-songs"].sort_by!(&:path)
    end

    index_hash["artists"][artist]["albums"][album] = album_hash
  end
end

File.open(index_file, "w") { |io| io.write Marshal.dump index_hash }

info "all done."
